#!/bin/sh
#
# Based on the script: http://www.finnie.org/software/raspberrypi/rpi2-build-image.sh
#

# where the script is located
TOPDIR=$(dirname $(readlink -f $0))

# source custom configuration
echo "${TOPDIR}/local.conf"
if [ -f "${TOPDIR}/local.conf" ]; then
    . "${TOPDIR}/local.conf"
fi

# default configuration values
# VARIABLE=${1:-DEFAULTVALUE}
RELEASE=${RELEASE:-vivid}
WORKDIR=${WORKDIR:-${TOPDIR}}
BASEDIR=${TOPDIR}/${RELEASE}
BUILDDIR=${BASEDIR}/build
DEFAULT_MIRROR="http://ports.ubuntu.com/"
MIRROR_URL=${MIRROR_URL:-${DEFAULT_MIRROR}}

# Set up environment
export TZ=UTC
R=${BUILDDIR}/chroot

DATE="$(date +%Y%m%d)"
IMG="$BASEDIR/ubuntu-rpi2-${RELEASE}-${DATE}.img"

do_mount() {
    echo "mount proc et. al."
    # when mounting with "mount -t proc none $R/proc" chromium (yes, the browser)
    # opens files under the chroot proc directory and prevent the unmount
    # if we unmount by force, then chromium crashes.
    # The solution is to use mount bind.
    mount -o bind /dev/pts $R/dev/pts
    mount -o bind /proc $R/proc
    mount -o bind /sys $R/sys
}

do_umount() {
    echo "unmount_proc"
    umount $R/dev/pts
    umount $R/proc
    umount $R/sys
}

do_bootstrap() {
    if [ -d "${R}" ]; then
        echo "the chroot directory already exists: $R"
        echo "delete the directory before bootstrap"
        exit
    fi

    mkdir -p $R
    apt-get -y install ubuntu-keyring
    # Execute ARM code on x86, see https://wiki.debian.org/QemuUserEmulation
    apt-get -y install qemu-user-static

    qemu-debootstrap --arch armhf $RELEASE $R $MIRROR_URL
}

do_setup() {
    do_mount
    
    chroot $R apt-get update
    chroot $R apt-get -y -u dist-upgrade

    # Install the RPi PPA
    cat <<EOM >$R/etc/apt/preferences.d/rpi2-ppa
Package: *
Pin: release o=LP-PPA-fo0bar-rpi2
Pin-Priority: 990

Package: *
Pin: release o=LP-PPA-fo0bar-rpi2-staging
Pin-Priority: 990
EOM
    chroot $R apt-get -y install software-properties-common ubuntu-keyring
    chroot $R apt-add-repository -y ppa:fo0bar/rpi2
    chroot $R apt-get update

    # Standard packages
    chroot $R apt-get -y install ubuntu-standard initramfs-tools raspberrypi-bootloader-nokernel rpi2-ubuntu-errata language-pack-en

    # Kernel installation
    # Install flash-kernel last so it doesn't try (and fail) to detect the
    # platform in the chroot.
    chroot $R apt-get -y --no-install-recommends install linux-image-rpi2
    chroot $R apt-get -y install flash-kernel
    VMLINUZ="$(ls -1 $R/boot/vmlinuz-* | sort | tail -n 1)"
    [ -z "$VMLINUZ" ] && exit 1
    cp $VMLINUZ $R/boot/firmware/kernel7.img
    INITRD="$(ls -1 $R/boot/initrd.img-* | sort | tail -n 1)"
    [ -z "$INITRD" ] && exit 1
    cp $INITRD $R/boot/firmware/initrd7.img

    # Set up fstab
    cat <<EOM >$R/etc/fstab
proc            /proc           proc    defaults          0       0
/dev/mmcblk0p2  /               ext4    defaults,noatime  0       1
/dev/mmcblk0p1  /boot/firmware  vfat    defaults          0       2
EOM

    # Set up hosts
    echo ubuntu >$R/etc/hostname
    cat <<EOM >$R/etc/hosts
127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

127.0.1.1       ubuntu
EOM

    # Set up default user
    chroot $R adduser --gecos "Ubuntu user" --add_extra_groups --disabled-password ubuntu
    chroot $R usermod -a -G sudo,adm -p '$6$iTPEdlv4$HSmYhiw2FmvQfueq32X30NqsYKpGDoTAUV2mzmHEgP/1B7rV3vfsjZKnAWn6M2d.V2UsPuZ2nWHg1iqzIu/nF/' ubuntu

    # Clean cached downloads
    chroot $R apt-get clean

    # Set up interfaces
    cat <<EOM >$R/etc/network/interfaces
# interfaces(5) file used by ifup(8) and ifdown(8)
# Include files from /etc/network/interfaces.d:
source-directory /etc/network/interfaces.d

# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eth0
iface eth0 inet dhcp
EOM

    # Set up firmware config
    cat <<EOM >$R/boot/firmware/config.txt
# For more options and information see 
# http://www.raspberrypi.org/documentation/configuration/config-txt.md
# Some settings may impact device functionality. See link above for details

# uncomment if you get no picture on HDMI for a default "safe" mode
#hdmi_safe=1

# uncomment this if your display has a black border of unused pixels visible
# and your display can output without overscan
#disable_overscan=1

# uncomment the following to adjust overscan. Use positive numbers if console
# goes off screen, and negative if there is too much border
#overscan_left=16
#overscan_right=16
#overscan_top=16
#overscan_bottom=16

# uncomment to force a console size. By default it will be display's size minus
# overscan.
#framebuffer_width=1280
#framebuffer_height=720

# uncomment if hdmi display is not detected and composite is being output
#hdmi_force_hotplug=1

# uncomment to force a specific HDMI mode (this will force VGA)
#hdmi_group=1
#hdmi_mode=1

# uncomment to force a HDMI mode rather than DVI. This can make audio work in
# DMT (computer monitor) modes
#hdmi_drive=2

# uncomment to increase signal to HDMI, if you have interference, blanking, or
# no display
#config_hdmi_boost=4

# uncomment for composite PAL
#sdtv_mode=2

#uncomment to overclock the arm. 700 MHz is the default.
#arm_freq=800
EOM
    ln -sf firmware/config.txt $R/boot/config.txt
    echo 'dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 rootwait' > $R/boot/firmware/cmdline.txt
    ln -sf firmware/cmdline.txt $R/boot/cmdline.txt

    # Load sound module on boot
    cat <<EOM >$R/lib/modules-load.d/rpi2.conf
snd_bcm2835
bcm2708_rng
EOM

    # Blacklist platform modules not applicable to the RPi2
    cat <<EOM >$R/etc/modprobe.d/rpi2.conf
blacklist snd_soc_pcm512x_i2c
blacklist snd_soc_pcm512x
blacklist snd_soc_tas5713
blacklist snd_soc_wm8804
EOM

    # Clean up files
    # This code is EXTREMELY DANGEROUS: DOUBLE CHECK
    # If variable "$R" is empty, it's going to clean the host!
    # For this reason, we check $R to be non-empty early in the script
    rm -f $R/etc/apt/sources.list.save
    rm -f $R/etc/resolvconf/resolv.conf.d/original
    rm -rf $R/run
    mkdir -p $R/run
    rm -f $R/etc/*-
    rm -f $R/root/.bash_history
    rm -rf $R/tmp/*
    rm -f $R/var/lib/urandom/random-seed
    [ -L $R/var/lib/dbus/machine-id ] || rm -f $R/var/lib/dbus/machine-id
    rm -f $R/etc/machine-id

    do_umount
}

do_loop_mount() {
    IMAGE="$1"
    VFAT_LOOP="$(losetup -o 1M --sizelimit 64M -f --show ${IMAGE})"
    EXT4_LOOP="$(losetup -o 65M --sizelimit 1727M -f --show ${IMAGE})"
    MOUNTDIR="$BUILDDIR/mount"
    mkdir -p "$MOUNTDIR"
    mount "$EXT4_LOOP" "$MOUNTDIR"
    mkdir -p "$MOUNTDIR/boot/firmware"
    mount "$VFAT_LOOP" "$MOUNTDIR/boot/firmware"
    echo "image directory: ${MOUNTDIR}"
}

do_loop_umount() {
    IMAGE="$1"
    for LOOP_FILE in $(losetup -j ${IMAGE} | awk {'print $1'} | cut -d: -f1); do
        echo "$LOOP_FILE"
        umount "$LOOP_FILE"
        losetup -d "$LOOP_FILE"
    done
}

do_make_image() {
    # Build the image file
    # Currently hardcoded to a 1.75GiB image

    dd if=/dev/zero of="${IMG}" bs=1M count=1
    dd if=/dev/zero of="${IMG}" bs=1M count=0 seek=1792
    sfdisk -f "${IMG}" <<EOM
unit: sectors

1 : start=     2048, size=   131072, Id= c, bootable
2 : start=   133120, size=  3536896, Id=83
3 : start=        0, size=        0, Id= 0
4 : start=        0, size=        0, Id= 0
EOM

    VFAT_LOOP="$(losetup -o 1M --sizelimit 64M -f --show ${IMG})"
    EXT4_LOOP="$(losetup -o 65M --sizelimit 1727M -f --show ${IMG})"
    mkfs.vfat "$VFAT_LOOP"
    mkfs.ext4 "$EXT4_LOOP"
    MOUNTDIR="$BUILDDIR/mount"
    mkdir -p "$MOUNTDIR"
    mount "$EXT4_LOOP" "$MOUNTDIR"
    mkdir -p "$MOUNTDIR/boot/firmware"
    mount "$VFAT_LOOP" "$MOUNTDIR/boot/firmware"
    rsync -a "$R/" "$MOUNTDIR/"
    umount "$MOUNTDIR/boot/firmware"
    umount "$MOUNTDIR"
    losetup -d "$EXT4_LOOP"
    losetup -d "$VFAT_LOOP"
    if which bmaptool; then
      bmaptool create -o ${IMG}.bmap ${IMG}
    fi
}

usage() {
    echo "usage:"
    echo "available commands: [ info | bootstrap | image ]"
}

clean_up() {
    echo "cleanup"
    do_umount
    exit
}

trap clean_up HUP INT TERM

if [ "x${R}" = "x" ]; then
    echo "Fatal error: variable R must not be empty"
    exit
fi

if [ ! "$(id -u)" -eq 0 ]; then
    echo "this script requires root privileges, run with sudo"
    exit
fi

case "$1" in
info)
    echo "info"
    echo "RELEASE=${RELEASE}"
    echo "WORKDIR=${WORKDIR}"
    echo "BASEDIR=${BASEDIR}"
    echo "BUILDDIR=${BUILDDIR}"
    echo "DEFAULT_MIRROR=${DEFAULT_MIRROR}"
    echo "MIRROR_URL=${MIRROR_URL}"
    echo "CHROOT=$R"
    ;;
bootstrap)
	echo "bootstrap"
    do_bootstrap
    ;;
setup)
	echo "setup"
    do_setup
    ;;
mount)
    do_mount
    ;;
umount)
    do_umount
    ;;
shell)
    do_mount
    chroot $R /bin/bash
    do_umount
    ;;
image)
	echo "make image"
    do_make_image
    ;;
loop_mount)
	echo "mount loopback"
    do_loop_mount ${IMG}
    ;;
loop_umount)
	echo "umount loopback"
    do_loop_umount ${IMG}
    ;;
*)
    echo "unkown command $1"
    usage
   ;;
esac

